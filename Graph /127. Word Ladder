Link : https://leetcode.com/problems/word-ladder/

const int N=5005;
vector<int>adj[N];
int dis[N];
bool valid(string s,string h){
    int res=0;
    for(int i=0;i<s.length();i++){
        if(s[i]!=h[i]){
            res++;
        }
        if(res>=2){
            return 0;
        }
    }
    return (res==1);
}
void addedge(int a,int b){
    adj[a].push_back(b);
    adj[b].push_back(a);
}
void init(int n){
    for(int i=0;i<=n;i++){
        adj[i].clear();dis[i]=-1;
    }
}
void bfs(int source){
    dis[source]=0;
    queue<int>q;q.push(source);
    while(!q.empty()){
        int u=q.front();q.pop();
        for(auto f:adj[u]){
            if(dis[f]!=-1){
                continue;
            }
            dis[f]=dis[u]+1;
            q.push(f);
        }
    }

}
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        init(wordList.size());int ind=-1;
        for(int i=0;i<wordList.size();i++){
            string s=wordList[i];
            if(valid(s,beginWord)){
                addedge(0,i+1);
            }
        }
        for(int i=0;i<wordList.size();i++){
            if(wordList[i]==endWord){
                ind=i+1;
            }
        }
        for(int i=0;i<wordList.size();i++){
            for(int j=i+1;j<wordList.size();j++){
                string s=wordList[i];
                string h=wordList[j];
                if(valid(s,h)){
                    addedge(i+1,j+1);
                }
            }
        }
        if(ind==-1){
            return 0;
        }
        bfs(0);
        if(dis[ind]==-1){
            return 0;
        }
        return dis[ind]+1;
   }
};
