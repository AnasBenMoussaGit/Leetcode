Link : https://leetcode.com/problems/minimum-score-of-a-path-between-two-cities/

int par[10000];
int getpar(int n){
    if(n==par[n]){
        return n;
    }
    return par[n]=getpar(par[n]);
}
void unite(int a,int b){
    a=getpar(a);b=getpar(b);
    if(a!=b){
        par[b]=a;
    }
}
struct edge {
    int a;int b;int w;
};
bool comp(edge a,edge b){
    return a.w<b.w;
}
int ans[N];
vector<pair<int,int>>adj[100000];
for(auto u:adj[])
class Solution {
public:
    int minScore(int n, vector<vector<int>>& roads) {
        vector<edge>edges;
        for(int i=0;i<roads.size();i++){
            int a=roads[i][0];int b=roads[i][1];
            int c=roads[i][2];
            edge e;e.a=a;e.b=b;e.w=c;
            edges.push_back(e);
        }
        sort(edges.begin(),edges.end(),comp);
        for(auto u:edges){
            if(sameset(u.a,u.b)){
                continue;
            }
            unite(u.a,u.b);
            adj[u.a].push_back({u.b,u.w});
            adj[u.b].push_back({u.a,u.w});
        }

        return 
    }
};
